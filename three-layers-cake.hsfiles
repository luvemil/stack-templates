{-# START_FILE package.yaml #-}
name:                {{name}}
version:             0.1.0.0
github:              "{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}"
license:             BSD3
author:              "{{author-name}}{{^author-name}}Author name here{{/author-name}}"
maintainer:          "{{author-email}}{{^author-email}}example@example.com{{/author-email}}"
copyright:           "{{copyright}}{{^copyright}}{{year}}{{^year}}2019{{/year}} {{author-name}}{{^author-name}}Author name here{{/author-name}}{{/copyright}}"

extra-source-files:
- README.md
- ChangeLog.md

# Metadata used when publishing your package
# synopsis:            Short description of your package
# category:            {{category}}{{^category}}Web{{/category}}

# To avoid duplicated efforts in documentation and dealing with the
# complications of embedding Haddock markup inside cabal files, it is
# common to point users to the README.md file.
description:         Please see the README on GitHub at <https://github.com/{{github-username}}{{^github-username}}githubuser{{/github-username}}/{{name}}#readme>

dependencies:
- base >= 4.7 && < 5
- mtl
- tomland
- bytestring

ghc-options:
  - -Wall
  - -Wincomplete-uni-patterns
  - -Wincomplete-record-updates
  - -Wcompat
  - -Widentities
  - -Wredundant-constraints
  - -fhide-source-paths
  - -Wpartial-fields

default-extensions:
  - BangPatterns
  - ConstraintKinds
  - DataKinds
  - DeriveGeneric
  - DerivingStrategies
  - DerivingVia
  - FlexibleContexts
  - FlexibleInstances
  - GeneralizedNewtypeDeriving
  - InstanceSigs
  - KindSignatures
  - LambdaCase
  - MultiParamTypeClasses
  - OverloadedStrings
  - OverloadedLabels
  - RecordWildCards
  - ScopedTypeVariables
  - TypeApplications
  - TypeFamilies
  - TypeOperators


library:
  source-dirs: src

executables:
  {{name}}-exe:
    main:                Main.hs
    source-dirs:         app
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - {{name}}

tests:
  {{name}}-test:
    main:                Spec.hs
    source-dirs:         test
    ghc-options:
    - -threaded
    - -rtsopts
    - -with-rtsopts=-N
    dependencies:
    - {{name}}

{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE test/Spec.hs #-}
main :: IO ()
main = putStrLn "Test suite not yet implemented"

{-# START_FILE config.toml #-}
version="0.1.0"

{-# START_FILE src/Lib.hs #-}
module Lib
    ( main
    )
where

import           Lib.App
import           Lib.Config                     ( Config(..)
                                                , loadConfig
                                                )
import           Lib.Server                     ( application )
import           Lib.StaticInfo                 ( StaticInfo(..) )

mkAppEnv :: Config -> IO AppEnv
mkAppEnv Config {..} = do
    -- IO configuration

    -- pure configuration
    let sInfo    = StaticInfo { sVersion = cVersion }
    pure Env { .. }

-- | Basic runner. Here you can fork execution and put a `run "8080" $ application env` 
-- | to have your server listen on a port.
runServer :: AppEnv -> IO ()
runServer env = application env

main :: IO ()
main = loadConfig >>= mkAppEnv >>= runServer

{-# START_FILE src/Lib/App.hs #-}
module Lib.App
    ( module Lib.App.Env
    , module Lib.App.Monad
    )
where

import           Lib.App.Env
import           Lib.App.Monad

{-# START_FILE src/Lib/App/Env.hs #-}
{-# LANGUAGE AllowAmbiguousTypes  #-}
{-# LANGUAGE TypeSynonymInstances #-}

module Lib.App.Env
    ( Env(..)
    , grab
    )
where

import           Lib.StaticInfo                 ( StaticInfo )

import           Data.Kind                      ( Type )
import           Control.Monad.Reader           ( MonadReader
                                                , ask
                                                )

data Env (m :: Type -> Type) = Env
    { sInfo :: StaticInfo
    }

class Has field env where
    obtain :: env -> field

instance Has StaticInfo (Env m) where
    obtain = sInfo

grab :: forall  field env m . (MonadReader env m, Has field env) => m field
grab = fmap (obtain @field) ask
{-# INLINE grab #-}

{-# START_FILE src/Lib/App/Monad.hs #-}
module Lib.App.Monad
    ( App
    , runApp
    , AppEnv
    )
where

import           Control.Monad.Reader
import           Lib.App.Env                    ( Env )

type AppEnv = Env App

-- | Main application monad.
newtype App a = App
    { unApp :: ReaderT AppEnv IO a
    } deriving (Functor, Applicative, Monad, MonadIO, MonadReader AppEnv)


runApp :: AppEnv -> App a -> IO a
runApp env a = runReaderT (unApp a) env

{-# START_FILE src/Lib/StaticInfo.hs #-}
module Lib.StaticInfo (StaticInfo(..)) where

import Data.ByteString.Char8 (ByteString)

data StaticInfo = StaticInfo
    { sVersion :: ByteString
    }

{-# START_FILE src/Lib/Server.hs #-}
module Lib.Server
    ( application
    )
where

import           Lib.App
import           Lib.StaticInfo                 ( StaticInfo(..) )

import           Control.Monad.IO.Class         ( liftIO )
import qualified Data.ByteString.Char8    as BS

{- | This is our main application. 
You can swap runApp with a runner that implements (e.g.) logging. When the application
gets non trivial, you can move the monad elsewere and use
```
application env = runner (app env)
```
-}
application :: AppEnv -> IO ()
application env = runApp env $ do
    sInfo <- grab @StaticInfo
    liftIO $ BS.putStrLn $ BS.concat ["Version ", (sVersion sInfo)]

{-# START_FILE src/Lib/Config.hs #-}
module Lib.Config
    ( Config(..)
    , loadConfig
    )
where

import           Toml                           ( TomlCodec
                                                , (.=)
                                                )
import           Control.Monad.IO.Class         ( MonadIO )
import           Data.ByteString                ( ByteString )

import qualified Toml

-- | Data type for the configurable elements of the application.
data Config = Config
    { cVersion   :: !ByteString
    }

-- | TOML codec for the 'Config' data type.
configT :: TomlCodec Config
configT = Config <$> Toml.byteString "version" .= cVersion

-- | Loads the @config.toml@ file.
loadConfig :: MonadIO m => m Config
loadConfig = Toml.decodeFile configT "config.toml"

{-# START_FILE app/Main.hs #-}
module Main where

import qualified Lib

main :: IO ()
main = Lib.main

{-# START_FILE README.md #-}
# {{name}}

{-# START_FILE ChangeLog.md #-}
# Changelog for {{name}}

## Unreleased changes

{-# START_FILE LICENSE #-}
Copyright {{author-name}}{{^author-name}}Author name here{{/author-name}} (c) {{year}}{{^year}}2019{{/year}}

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of {{author-name}}{{^author-name}}Author name here{{/author-name}} nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

{-# START_FILE .gitignore #-}
.stack-work/
*~
